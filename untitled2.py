# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLUrzEDhy15c-Bn0V956tL3p-bLyfzmk
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('coin_dataset.csv')

# Encode categorical columns
label_encoder = LabelEncoder()
data['first_face'] = label_encoder.fit_transform(data['first_face'])
data['throwing_style'] = label_encoder.fit_transform(data['throwing_style'])
data['Result'] = label_encoder.fit_transform(data['Result'])

# Separate data into X (input) and y (output)
X = data[['first_face', 'throwing_style']]
y = data['Result']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0 )

# Create a neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(10, activation='relu', input_dim=2),  # Input layer
    tf.keras.layers.Dense(1, activation='sigmoid')  # Output layer (sigmoid activation for binary classification)
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Visualize training and validation losses and accuracies
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Losses')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracies')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Print the accuracies at the last training epoch
last_train_accuracy = history.history['accuracy'][-1]
last_val_accuracy = history.history['val_accuracy'][-1]
print(f'Last training accuracy at the last epoch: {last_train_accuracy:.4f}')
print(f'Validation accuracy at the last epoch: {last_val_accuracy:.4f}')

plt.tight_layout()
plt.show()

from tensorflow.keras.utils import plot_model

# Modeli görselleştir
plot_model(model, show_shapes=True, rankdir="LR", to_file='model_plot.png')

# Load the dataset
data_test = pd.read_csv('coin_dataset_test.csv')

# Encode categorical columns
label_encoder = LabelEncoder()
data_test['first_face'] = label_encoder.fit_transform(data_test['first_face'])
data_test['throwing_style'] = label_encoder.fit_transform(data_test['throwing_style'])
data_test['Result'] = label_encoder.fit_transform(data_test['Result'])

# Separate data into X (input) and y (output)
X_test_custom = data_test[['first_face', 'throwing_style']]
y_test_custom = data_test['Result']

# Make predictions using the model
predictions = model.predict(X_test_custom)
rounded_predictions = np.round(predictions)  # Round the predictions (for binary classification)

# Print predictions to the screen
true_val = 0
for i in range(len(y_test_custom)):
    true_label = y_test_custom.iloc[i]
    predicted_label = rounded_predictions[i][0]

    if true_label == predicted_label:
        print(f"Data #{i + 1}: Correct Prediction ({true_label})")
        true_val += 1
    else:
        print(f"Data #{i + 1}: Incorrect Prediction - True: {true_label}, Predicted: {predicted_label}")

print(f"Percentage of correct predictions: {(true_val / (i + 1) * 100)}")